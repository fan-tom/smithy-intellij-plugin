{
    parserClass="software.amazon.smithy.intellij.SmithyParser"
    parserUtilClass="com.intellij.lang.parser.GeneratedParserUtilBase"
    extends="software.amazon.smithy.intellij.psi.SmithyPsiElement"
    psiClassPrefix="Smithy"
    psiImplClassSuffix="Impl"
    psiPackage="software.amazon.smithy.intellij.psi"
    psiImplPackage="software.amazon.smithy.intellij.psi.impl"
    elementTypeHolderClass="software.amazon.smithy.intellij.psi.SmithyTypes"
    elementTypeClass="software.amazon.smithy.intellij.SmithyElementType"
    tokenTypeClass="software.amazon.smithy.intellij.SmithyTokenType"
    //Note: some tokens have wrapper/alias rules for better AST generation, so all tokens have TOKEN_ to disambiguate within SmithyTypes
    tokens=[
        //Punctuation
        TOKEN_OPEN_PAREN="("
        TOKEN_CLOSE_PAREN=")"
        TOKEN_OPEN_BRACE="{"
        TOKEN_CLOSE_BRACE="}"
        TOKEN_OPEN_BRACKET="["
        TOKEN_CLOSE_BRACKET="]"
        TOKEN_COLON=":"
        TOKEN_COMMA=","
        TOKEN_EQUALS="="
        TOKEN_PERIOD="."
        TOKEN_DOLLAR_SIGN="$"
        TOKEN_AT="@"
        TOKEN_HASH="#"
        //Symbols (keywords (not reserved words), identifiers, object keys, etc.)
        TOKEN_APPLY="apply"
        TOKEN_USE="use"
        TOKEN_LIST="list"
        TOKEN_SET="set"
        TOKEN_MAP="map"
        TOKEN_METADATA="metadata"
        TOKEN_NAMESPACE="namespace"
        TOKEN_STRUCTURE="structure"
        TOKEN_UNION="union"
        TOKEN_SERVICE="service"
        TOKEN_VERSION="version"
        TOKEN_OPERATIONS="operations"
        TOKEN_RESOURCES="resources"
        TOKEN_RENAME="rename"
        TOKEN_OPERATION="operation"
        TOKEN_INPUT="input"
        TOKEN_OUTPUT="output"
        TOKEN_ERRORS="errors"
        TOKEN_RESOURCE="resource"
        TOKEN_IDENTIFIERS="identifiers"
        TOKEN_CREATE="create"
        TOKEN_PUT="put"
        TOKEN_READ="read"
        TOKEN_UPDATE="update"
        TOKEN_DELETE="delete"
        TOKEN_COLLECTION_OPERATIONS="collectionOperations"
        TOKEN_NULL="null"
        TOKEN_BOOLEAN="regexp:true|false"
        TOKEN_SIMPLE_TYPE_NAME="regexp:blob|boolean|document|string|byte|short|integer|long|float|double|bigInteger|bigDecimal|timestamp"
        TOKEN_SYMBOL="regexp:_*[A-Za-z][A-Za-z0-9_]*"
        //Literals
        TOKEN_NUMBER="regexp:-?(0|([1-9][0-9]*))(\.[0-9]+)?(e[+-]?[0-9]+)?"
        //Note: both string and text_block regex here permit invalid escape sequences to later on annotate them as errors
        TOKEN_STRING="regexp:\"((\\['bfnrt/\"\\])|(\\u[0-9A-Fa-f]{4})|(\\?[ !#-\[\]-\U10FFFF]))*\""
        TOKEN_TEXT_BLOCK="regexp:\"\"\"\n((\\['bfnrt/\"\\])|(\\u[0-9A-Fa-f]{4})|(\\?[ !#-\[\]-\U10FFFF])|(\\[\"]{3})|(\\?\r?\n))*\"\"\""
        //Note: due to limitations with FormattingModelBuilder and DocRenderPassFactory, comments cannot include the trailing line-break as it breaks formatting/rendering, but validation is done within SmithyAnnotator
        TOKEN_LINE_COMMENT="regexp:(//)|(//[^/\n][\t -\U10FFFF]*)"
        TOKEN_DOCUMENTATION_LINE="regexp:///[\t -\U10FFFF]*"
        //Partial-match tokens for intermediate fallback states to avoid returning BAD_CHARACTER when quoted text is being typed out
        //see: https://intellij-support.jetbrains.com/hc/en-us/community/posts/360010554180--Custom-Language-Plugin-Highlighting-not-working-despite-correctly-parsed-psi-file
        TOKEN_INCOMPLETE_STRING="regexp:\"((\\['bfnrt/\"\\])|(\\u[0-9A-Fa-f]{4})|(\\?[ !#-\[\]-\U10FFFF]))+"
        TOKEN_INCOMPLETE_TEXT_BLOCK="regexp:\"\"\"\n((\\['bfnrt/\"\\])|(\\u[0-9A-Fa-f]{4})|(\\?[ !#-\[\]-\U10FFFF])|(\\[\"]{3})|(\\?\r?\n))+"
    ]
    implements("^(?!.*element).*")="software.amazon.smithy.intellij.psi.SmithyElement"
    implements("array|object|shape_body|trait_body")="software.amazon.smithy.intellij.psi.SmithyContainer"
    extends("array|object|primitive")=value
    extends("null|boolean|number|string|text_block|shape_id")=primitive
    extends("symbol|null|boolean|simple_type_name")=id
    extends("aggregate_shape|simple_shape||service|operation|resource")=shape
    extends("list|set|map|structure|union")=aggregate_shape
    extends("control|entry|metadata")=keyed_element
}
//https://awslabs.github.io/smithy/1.0/spec/core/idl.html
root ::= model
model ::= control* metadata* [namespace import* (applied_trait | incomplete_applied_trait | shape)*] {
    methods=[control="" metadata="" namespace="" imports="import" applied_traits="applied_trait" incomplete_applied_trait="" shapes="shape"]
    implements="software.amazon.smithy.intellij.psi.SmithyModelExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyModelMixin"
}
control ::= TOKEN_DOLLAR_SIGN key TOKEN_COLON value {
    implements="software.amazon.smithy.intellij.psi.SmithyControlExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyControlMixin"
}
metadata ::= TOKEN_METADATA key TOKEN_EQUALS value {
    implements="software.amazon.smithy.intellij.psi.SmithyMetadataExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyMetadataMixin"
}
namespace ::= TOKEN_NAMESPACE namespace_id {
    implements="software.amazon.smithy.intellij.psi.SmithyNamespaceExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyNamespaceMixin"
}
import ::= TOKEN_USE shape_id {
    implements="software.amazon.smithy.intellij.psi.SmithyImportExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyImportMixin"
}

//Shapes
shape ::= simple_shape | list | set | map | structure | union | service | operation | resource {
    implements="software.amazon.smithy.intellij.psi.SmithyShapeExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyShapeMixin"
}
simple_shape ::= [documentation] trait* simple_type_name shape_name {
    methods=[trait="" simple_type_name="" shape_name="" ]
}
list ::= [documentation] trait* TOKEN_LIST shape_name shape_body {
    methods=[trait="" shape_name="" body="shape_body"]
    mixin="software.amazon.smithy.intellij.psi.SmithyListMixin"
}
set ::= [documentation] trait* TOKEN_SET shape_name shape_body {
    methods=[trait="" shape_name="" body="shape_body"]
    mixin="software.amazon.smithy.intellij.psi.SmithySetMixin"
}
map ::= [documentation] trait* TOKEN_MAP shape_name shape_body {
    methods=[trait="" shape_name="" body="shape_body"]
    mixin="software.amazon.smithy.intellij.psi.SmithyMapMixin"
}
structure ::= [documentation] trait* TOKEN_STRUCTURE shape_name shape_body {
    methods=[trait="" shape_name="" body="shape_body"]
}
union ::= [documentation] trait* TOKEN_UNION shape_name shape_body {
    methods=[trait="" shape_name="" body="shape_body"]
}
service ::= [documentation] trait* TOKEN_SERVICE shape_name object {
    methods=[trait="" shape_name="" body="object"]
    mixin="software.amazon.smithy.intellij.psi.SmithyServiceMixin"
}
operation ::= [documentation] trait* TOKEN_OPERATION shape_name object {
    methods=[trait="" shape_name="" body="object"]
    mixin="software.amazon.smithy.intellij.psi.SmithyOperationMixin"
}
resource ::= [documentation] trait* TOKEN_RESOURCE shape_name object {
    methods=[trait="" shape_name="" body="object"]
    mixin="software.amazon.smithy.intellij.psi.SmithyResourceMixin"
}
shape_body ::= TOKEN_OPEN_BRACE [member (TOKEN_COMMA member)* [TOKEN_COMMA] [incomplete_member]] TOKEN_CLOSE_BRACE {
    methods=[members="member" incomplete_member=""]
}
member ::= [documentation] trait* member_name TOKEN_COLON shape_id {
    methods=[declared_traits="trait" name_identifier="member_name"]
    implements="software.amazon.smithy.intellij.psi.SmithyMemberExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyMemberMixin"
}

//Traits
applied_trait ::= TOKEN_APPLY (member_id | shape_id) trait {
    implements="software.amazon.smithy.intellij.psi.SmithyAppliedTraitExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyAppliedTraitMixin"
}
trait ::= TOKEN_AT shape_id [trait_body] {
    methods=[body="trait_body" shape="shape_id"]
    implements=["software.amazon.smithy.intellij.psi.SmithyTraitExt"]
    mixin="software.amazon.smithy.intellij.psi.SmithyTraitMixin"
}
trait_body ::= TOKEN_OPEN_PAREN [trait_values | value] TOKEN_CLOSE_PAREN {
    methods=[values="entry" incomplete_entry=""]
}
private trait_values ::= entry (TOKEN_COMMA entry)* [TOKEN_COMMA] [incomplete_entry]

//Node values
key ::= id | string {
    implements="software.amazon.smithy.intellij.psi.SmithyKeyExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyKeyMixin"
}
value ::= array | object | primitive {
    implements="software.amazon.smithy.intellij.psi.SmithyValueExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyValueMixin"
}
entry ::= key TOKEN_COLON value {
    implements="software.amazon.smithy.intellij.psi.SmithyEntryExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyEntryMixin"
}
array ::= TOKEN_OPEN_BRACKET [value (TOKEN_COMMA value)* [TOKEN_COMMA]] TOKEN_CLOSE_BRACKET {
    methods=[values="value"]
}
object ::= TOKEN_OPEN_BRACE [entry (TOKEN_COMMA entry)* [TOKEN_COMMA] [incomplete_entry]] TOKEN_CLOSE_BRACE {
    methods=[fields="entry" incomplete_entry=""]
}
primitive ::= null | boolean | number | string | text_block | shape_id

//Shape ID
shape_id ::= [namespace_id TOKEN_HASH] id {
    methods=[id=""]
    implements="software.amazon.smithy.intellij.psi.SmithyShapeIdExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyShapeIdMixin"
}
member_id ::= shape_id TOKEN_DOLLAR_SIGN member_name {
    implements="software.amazon.smithy.intellij.psi.SmithyMemberIdExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyMemberIdMixin"
}
namespace_id ::= id (TOKEN_PERIOD id)* {
    methods=[parts="id"]
    implements="software.amazon.smithy.intellij.psi.SmithyNamespaceIdExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyNamespaceIdMixin"
}
shape_name ::= id {methods=[id=""]}
member_name ::= id {methods=[id=""]}
id ::= symbol | null | boolean | simple_type_name
       | TOKEN_APPLY | TOKEN_USE | TOKEN_LIST | TOKEN_SET | TOKEN_MAP | TOKEN_METADATA | TOKEN_NAMESPACE | TOKEN_STRUCTURE
       | TOKEN_UNION | TOKEN_SERVICE | TOKEN_OPERATION | TOKEN_RESOURCE | TOKEN_VERSION | TOKEN_OPERATIONS | TOKEN_RESOURCES
       | TOKEN_RENAME | TOKEN_INPUT | TOKEN_OUTPUT | TOKEN_ERRORS | TOKEN_IDENTIFIERS | TOKEN_CREATE | TOKEN_PUT | TOKEN_READ
       | TOKEN_UPDATE | TOKEN_DELETE | TOKEN_COLLECTION_OPERATIONS {
    methods=[null="" boolean=""]
}

//Incomplete/intermediate elements which allow for a seamless parsing experience when typing out new entries in higher-level nodes
//Without these "incomplete" members, the entire file would lose its parser state (and all syntax highlighting/annotations) until the member/entry was completed
incomplete_applied_trait ::= TOKEN_APPLY (member_id | shape_id){
    implements="software.amazon.smithy.intellij.psi.SmithyIncompleteAppliedTraitExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyIncompleteAppliedTraitMixin"
}
incomplete_member ::= member_name [TOKEN_COLON]
incomplete_entry ::= key [TOKEN_COLON]

//Re-declared tokens which will receive a dedicated AST node instead of raw PsiElement (since they are used in a meaningful way, like as a variant within another AST node)
null ::= TOKEN_NULL {methods=[TOKEN_NULL=""]}
boolean ::= TOKEN_BOOLEAN {
    methods=[TOKEN_BOOLEAN=""]
    implements="software.amazon.smithy.intellij.psi.SmithyBooleanExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyBooleanMixin"
}
number ::= TOKEN_NUMBER {
    methods=[TOKEN_NUMBER=""]
    implements="software.amazon.smithy.intellij.psi.SmithyNumberExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyNumberMixin"
}
string ::= TOKEN_STRING {methods=[TOKEN_STRING=""]}
text_block ::= TOKEN_TEXT_BLOCK {methods=[TOKEN_TEXT_BLOCK=""]}
symbol ::= TOKEN_SYMBOL {methods=[TOKEN_SYMBOL=""]}
simple_type_name ::= TOKEN_SIMPLE_TYPE_NAME {methods=[TOKEN_SIMPLE_TYPE_NAME=""]}
documentation ::= TOKEN_DOCUMENTATION_LINE+ {
    implements="software.amazon.smithy.intellij.psi.SmithyDocumentationExt"
    mixin="software.amazon.smithy.intellij.psi.SmithyDocumentationMixin"
}
//Fake rules (for introducing superinterfaces into the AST)
fake aggregate_shape ::= shape_body {
    methods=[body="shape_body"]
    mixin="software.amazon.smithy.intellij.psi.SmithyAggregateShapeMixin"
}
fake keyed_element ::= key {
    implements=["software.amazon.smithy.intellij.psi.SmithyKeyedElementExt"]
    mixin="software.amazon.smithy.intellij.psi.SmithyKeyedElementMixin"
}
