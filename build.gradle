plugins {
    id 'idea'
    id 'jacoco'
    id 'org.jetbrains.intellij' version '1.3.1'
    id 'org.jetbrains.changelog' version '1.3.1'
    id 'org.jetbrains.grammarkit' version '2021.1.3'
    id 'org.jetbrains.kotlin.jvm' version '1.7.22'
}

apply plugin: 'org.jetbrains.changelog'

group 'software.amazon.smithy'
version '2.0.19'

repositories {
    mavenCentral()
}

sourceSets {
    main.java.srcDirs 'src/main/gen'
}

test.finalizedBy jacocoTestReport
jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/psi/impl/**'])
        }))
    }
    doLast {
        println("Coverage Report: file://${reports.html.outputLocation.file("index.html").get()}")
    }
}

idea {
    module {
        generatedSourceDirs += file('src/main/gen')
    }
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.17.1'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'software.amazon.smithy:smithy-model:1.49.0'
}

intellij {
    version = '2021.3.2'
    updateSinceUntilBuild = false
}

patchPluginXml {
    sinceBuild = '213'
    changeNotes = provider { changelog.getLatest().toHTML() }
}


import org.jetbrains.grammarkit.tasks.GenerateLexer
import org.jetbrains.grammarkit.tasks.GenerateParser

task generateSmithyLexer(type: GenerateLexer) {
    source 'src/main/grammar/Smithy.flex'
    targetDir 'src/main/gen/software/amazon/smithy/intellij/'
    targetClass '_SmithyLexer'
    purgeOldFiles true
    outputs.upToDateWhen { false }
}

task generateSmithyParser(type: GenerateParser, dependsOn: generateSmithyLexer) {
    source 'src/main/grammar/Smithy.bnf'
    targetRoot 'src/main/gen/'
    pathToParser 'SmithyParser'
    pathToPsiRoot 'psi/'
    purgeOldFiles true
    outputs.upToDateWhen { false }
}

task generateSmithySelectorLexer(type: GenerateLexer) {
    source 'src/main/grammar/Selector.flex'
    targetDir 'src/main/gen/software/amazon/smithy/selector/intellij/'
    targetClass '_SmithySelectorLexer'
    purgeOldFiles true
    outputs.upToDateWhen { false }
}

task generateSmithySelectorParser(type: GenerateParser, dependsOn: generateSmithySelectorLexer) {
    source 'src/main/grammar/Selector.bnf'
    targetRoot 'src/main/gen/'
    pathToParser 'SmithySelectorParser'
    pathToPsiRoot 'psi/'
    purgeOldFiles true
    outputs.upToDateWhen { false }
}

compileKotlin {
    dependsOn generateSmithyParser, generateSmithySelectorParser
    kotlinOptions.freeCompilerArgs += ["-Xjvm-default=all-compatibility"]
}
